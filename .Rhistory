install.packages(c("caret", "faraway", "ggpubr", "glmnet", "leaps", "lemon"))
setwd("/media/uschi/seagate/uschi-home-sync/uschi/Seafile/uschi-work/repos/ara_field_trials")
# load packages
library(knitr)
library(pander)
library(ggplot2)
library(DAAG)
library(leaps)
library(faraway)
library(MASS)
library(glmnet)
library(caret)
library(tidyverse)
library(ggpubr)
library(lemon) # for coord_capped_cart
library(RColorBrewer)
library(ggrepel)
load("metabolite_arafield_model_lt50_acc.RData")
field4_pred_loocv <- func_calc_loocv_caret(field4_scaled, method_val = "lasso", eGrid_val = eGrid_lasso)
field4_known_LT50 <- field4_scaled$LT50ACC[which(field4_scaled$accession %in% accessions_known)]
field4_known_LT50
plot(field4_known_LT50, field4_pred_loocv)
field4_pred_loocv
head(field4_pred_loocv)
accessions_known
which(field4_scaled$accession %in% accessions_known)
View(field4_scaled)
field4_pred_loocv_df <- data.frame(accession = names(field4_pred_loocv),
predicted = field4_pred_loocv)
View(field4_pred_loocv_df)
head(lt50)
field4_pred_loocv_df <-
data.frame(accession = names(field4_pred_loocv),
predicted = field4_pred_loocv) %>%
left_join(lt50, by = c("accession", "Accession"))
field4_pred_loocv_df <-
data.frame(accession = names(field4_pred_loocv),
predicted = field4_pred_loocv) %>%
left_join(lt50, by = c("accession" = "Accession"))
plot(field4_pred_loocv_df$LT50ACC, field4_pred_loocv_df$predicted)
source("../functions/func_pred_plot.R")
par(mfrow=c(1,1))
func_pred_plot(x = field4_known_LT50,
y = field4_pred_loocv,
main_text = "lasso model",
labels = names(field4_pred_loocv))
field_data = field4_scaled
method_val = "lasso"
eGrid_val = eGrid_lasso
error_cv <- c()
pred_cv <- c()
accessions_known
accessions_training_cv <- accessions_known[-which(acc==accessions_known)]
acc = "N14"
accessions_training_cv <- accessions_known[-which(acc==accessions_known)]
accessions_testing_cv <- accessions_known[which(acc==accessions_known)]
idx_train_cv <- which(field_data$accession %in% accessions_training_cv)
idx_test_cv <- which(field_data$accession %in% accessions_testing_cv)
x_train_cv <- field_data[idx_train_cv, model_colnamesT[6:15]]
x_test_cv <- field_data[idx_test_cv, model_colnamesT[6:15]]
y_train_cv <- field_data[idx_train_cv, "LT50ACC"]
y_test_cv <- field_data[idx_test_cv, "LT50ACC"]
fit_caret_cv <- train(x = x_train_cv,
y = y_train_cv,
method = method_val,
tuneGrid = eGrid_val,
trControl = Control)
pred_cv <- c(pred_cv,
predict(fit_caret_cv, newdata = x_test_cv))
pred_cv
field_data[95:96,]
fit_caret_cv$pred
fit_caret_cv$finalModel
fit_caret_cv$call
fit_caret_cv$modelInfo
coefficients(fit_caret_cv$finalModel)
fit_caret_cv$finalModel$beta.pure
field_data$accession[which(field_data$accession %in% accessions_known)]
idx_test_cv
pred_cv
accessions_known
pred_cv[95]
pred_cv[1]
names(pred_cv)
idx_test_cv
rep(acc, length(idx_test_cv))
pred_cv_df <- data.frame(accession = rep(acc, length(idx_test_cv)),
predicted = predict(fit_caret_cv, newdata = x_test_cv))
pred_cv_df
source('/media/uschi/seagate/uschi-home-sync/uschi/Seafile/uschi-work/repos/functions/func_calc_loocv_caret.R')
field4_pred_loocv <- func_calc_loocv_caret(field_data = field4_scaled,
method_val = "lasso",
eGrid_val = eGrid_lasso)
dim(field4_pred_loocv)
pred_cv_df <- data.frame()
pred_cv_df <- rbind(pred_cv_df,
data.frame(accession = rep(acc, length(idx_test_cv)),
predicted = predict(fit_caret_cv, newdata = x_test_cv)))
View(pred_cv_df)
source('/media/uschi/seagate/uschi-home-sync/uschi/Seafile/uschi-work/repos/functions/func_calc_loocv_caret.R')
field4_pred_loocv <- func_calc_loocv_caret(field_data = field4_scaled,
method_val = "lasso",
eGrid_val = eGrid_lasso)
dim(field4_pred_loocv)
head(field4_pred_loocv)
field4_pred_loocv <-
field4_pred_loocv %>%
left_join(lt50, by = c("accession" = "Accession"))
head(field4_pred_loocv)
plot(field4_pred_loocv$LT50ACC, field4_pred_loocv$predicted)
func_pred_plot(x = field4_pred_loocv$LT50ACC,
y = field4_pred_loocv$predicted,
main_text = "lasso model",
labels = names(field4_pred_loocv))
func_pred_plot(x = field4_pred_loocv$LT50ACC,
y = field4_pred_loocv$predicted,
main_text = "lasso model",
labels = field4_pred_loocv$accession)
cor.test(field4_pred_loocv$LT50ACC, field4_pred_loocv$predicted)
head(field4_pred_cv)
# par(mfrow=c(1,1))
par(mfrow=c(1,2))
func_pred_plot(x = field4_pred_loocv$LT50ACC,
y = field4_pred_loocv$predicted,
main_text = "lasso model",
labels = field4_pred_loocv$accession)
func_pred_plot(x = field4_pred_cv$measured,
y = field4_pred_cv$predicted,
main_text = "LOOCV linear reg model",
labels = field4_pred_cv$accession)
save.image("metabolite_arafield_model_lt50_acc.RData")
library(proteus)
.libPaths()
if(!require(devtools)) install.packages("devtools")
devtools::install_github("krassowski/complex-upset")
install.packages("ggupset")
library(ggupset)
library(ComplexUpset)
library(tidyverse)
data_raw <- read_delim("Documents/Wettertabelle.txt", delim = "\t")
data_raw <- read_delim("~/Documents/Wettertabelle.txt", delim = "\t")
data_raw <- read_delim("home/uschi/Documents/Wettertabelle.txt", delim = "\t")
data_raw <- read_delim("home/uschi/Documents/Wettertabelle.csv", delim = "\t")
data_raw <- read_delim("/home/uschi/Documents/Wettertabelle.csv", delim = "\t")
View(data_raw)
colnames(data_raw)
colnames(data_raw) <- c("Date", "Temp_Min", "Temp_Max", "Sunshine_Duration", "Temp_Mean_Month",
"Temp_Mean", "Precip", "Precip_Mean", "Precip_24h")
parse_date(data_raw$Date, format = "%b-%y")
data_raw <- read_delim("/home/uschi/Documents/Wettertabelle.csv", delim = "\t")
colnames(data_raw) <- c("Date", "Temp_Min", "Temp_Max", "Sunshine_Duration", "Temp_Mean_Month",
"Temp_Mean", "Precip", "Precip_Mean", "Precip_24h")
parse_date(data_raw$Date, format = "%b-%y")
data_raw %>%
mutate(Date = parse_date(Date, format = "%b-%y"))
data <- data_raw[1:263, ] %>%
mutate(Date = parse_date(Date, format = "%b-%y"))
View(data)
data <- data_raw[1:263, ] %>%
mutate(Date = parse_date(Date, format = "%b-%y")) %>%
mutate(Year = year(Date),
Month = month(Date))
library(lubridate)
data <- data_raw[1:263, ] %>%
mutate(Date = parse_date(Date, format = "%b-%y")) %>%
mutate(Year = year(Date),
Month = month(Date))
data <- data_raw[1:263, ] %>%
mutate(Date = parse_date(Date, format = "%b-%y")) %>%
mutate(Year = year(Date),
Month = month(Date, label = T))
class(data$Date)
data %>%
ggplot(aes(x = Date, y = Temp_Max)) +
geom_line()
head(data)
data_long <-
data %>%
dplyr::select(-Month, -Year) %>%
pivot_longer(-Date, names_to = "Parameter", values_to = "Value")
View(data_long)
data_long %>%
filter(Parameter %in% c("Temp_Min", "Temp_Max")) %>%
ggplot(aes(x = Date, y = Value, color = Parameter)) +
geom_line()
data_long %>%
filter(Parameter %in% c("Temp_Mean_Month", "Temp_Mean")) %>%
ggplot(aes(x = Date, y = Value, color = Parameter)) +
geom_line()
data <- data_raw[1:263, ] %>%
mutate(Date = parse_date(Date, format = "%b-%y")) %>%
mutate(Year = year(Date),
Month = month(Date, label = T)) %>%
mutate(Temp_Mean_Diff = Temp_Mean_Month - Temp_Mean)
class(data$Date)
data_long <-
data %>%
dplyr::select(-Month, -Year) %>%
pivot_longer(-Date, names_to = "Parameter", values_to = "Value")
data %>%
ggplot(aes(x = Date, y = Temp_Mean_Diff)) +
geom_col()
data_long %>%
filter(Parameter %in% c("Precip", "Precip_Mean")) %>%
ggplot(aes(x = Date, y = Value, color = Parameter)) +
geom_line()
data %>%
ggplot(aes(x = Year, y = Temp_Mean_Diff)) +
geom_boxplot()
data %>%
ggplot(aes(x = Year, y = Temp_Mean_Diff, group = Year)) +
geom_boxplot()
data %>%
ggplot(aes(x = Year, y = Temp_Mean_Diff, group = Year)) +
geom_boxplot() * geom_smooth()
data %>%
ggplot(aes(x = Year, y = Temp_Mean_Diff, group = Year)) +
geom_boxplot() + geom_smooth()
data %>%
ggplot(aes(x = Year, y = Temp_Mean_Diff, color = Year)) +
geom_boxplot() + geom_smooth()
data %>%
ggplot(aes(x = Year, y = Temp_Mean_Diff, group = Year)) +
geom_boxplot() + geom_jitter()
data %>%
ggplot(aes(x = Year, y = Temp_Mean_Diff, fill = Year)) +
geom_boxplot() + geom_jitter()
data %>%
ggplot(aes(x = Year, y = Temp_Mean_Diff, fill = factor(Year))) +
geom_boxplot() + geom_jitter()
+ geom_smooth()
data %>%
ggplot(aes(x = Year, y = Temp_Mean_Diff, fill = factor(Year))) +
geom_boxplot() + geom_jitter() + geom_smooth()
data %>%
ggplot(aes(x = Year, y = Temp_Mean_Diff, group = factor(Year))) +
geom_boxplot() + geom_jitter() + geom_smooth()
data %>%
ggplot(aes(x = Year, y = Temp_Mean_Diff, fill = factor(Year))) +
geom_boxplot() + geom_jitter()
data %>%
ggplot(aes(x = Year, y = Temp_Mean_Diff, fill = factor(Year))) +
geom_boxplot()
data %>%  ggplot(aes(x = Date, y = Temp_Mean_Diff)) +
geom_point() + geom_smooth()
data <- data_raw[1:263, ] %>%
mutate(Date = parse_date(Date, format = "%b-%y")) %>%
mutate(Year = year(Date),
Month = month(Date, label = T)) %>%
mutate(Temp_Mean_Diff = Temp_Mean_Month - Temp_Mean,
Precip_Mean_Diff = Precip - Precip_Mean)
class(data$Date)
data_long <-
data %>%
dplyr::select(-Month, -Year) %>%
pivot_longer(-Date, names_to = "Parameter", values_to = "Value")
data %>%  ggplot(aes(x = Year, y = Precip_Mean_Diff, fill = factor(Year))) +
geom_boxplot()
data %>%  ggplot(aes(x = Month, y = Precip_Mean_Diff, fill = factor(Month))) +  geom_boxplot()
library(pheatmap)
data %>%  dplyr::select(-Year, -Month) %>%
column_to_rownames("Date") %>%
pheatmap(.)
data %>%  dplyr::select(-Year, -Month) %>%
column_to_rownames("Date") %>%
pheatmap(., scale = "column")
data %>%  dplyr::select(-Year, -Month) %>%
column_to_rownames("Date") %>%
pheatmap(., scale = "column", fontsize_row = 5)
data %>%  dplyr::select(-Year, -Month, -Precip_24h) %>%
column_to_rownames("Date") %>%
pheatmap(., scale = "column", fontsize_row = 5)
data %>%  dplyr::select(-Year, -Month, -Precip_24h) %>%
column_to_rownames("Date") %>% t %>%
pheatmap(., scale = "row", fontsize_col = 5)
data %>%  dplyr::select(-Year, -Month, -Precip_24h) %>%
column_to_rownames("Date") %>%
pheatmap(., scale = "column", fontsize_row = 5)
pdf("Wettertabelle_Heatmap.pdf", height = 20)
data %>%  dplyr::select(-Year, -Month, -Precip_24h) %>%
column_to_rownames("Date") %>%
pheatmap(., scale = "column", fontsize_row = 5)
dev.off()
dev.off()
pdf("Wettertabelle_Heatmap.pdf", height = 20)
data %>%  dplyr::select(-Year, -Month, -Precip_24h) %>%
column_to_rownames("Date") %>%
pheatmap(., scale = "column", fontsize_row = 5)
dev.off()
pdf("Documents/Wettertabelle_Heatmap.pdf", height = 20)
data %>%  dplyr::select(-Year, -Month, -Precip_24h) %>%
column_to_rownames("Date") %>%
pheatmap(., scale = "column", fontsize_row = 5)
dev.off()
pdf("Documents/Wettertabelle_Heatmap.pdf", height = 18, width = 5)
data %>%  dplyr::select(-Year, -Month, -Precip_24h) %>%
column_to_rownames("Date") %>%
pheatmap(., scale = "column", fontsize_row = 5)
dev.off()
data_long %>%
filter(Parameter %in% c("Temp_Min", "Temp_Max")) %>%
ggplot(aes(x = Date, y = Value, color = Parameter)) +
geom_line()
data_long %>%
filter(Parameter %in% c("Temp_Mean_Month", "Temp_Mean")) %>%
ggplot(aes(x = Date, y = Value, color = Parameter)) +
geom_line()
# Temp Diff
data %>%
ggplot(aes(x = Date, y = Temp_Mean_Diff)) +
geom_col()
data %>%  ggplot(aes(x = Year, y = Temp_Mean_Diff, fill = factor(Year))) +  geom_boxplot()
data %>%  ggplot(aes(x = Date, y = Temp_Mean_Diff)) +  geom_point() + geom_smooth()
data %>%  ggplot(aes(x = Year, y = Precip_Mean_Diff, fill = factor(Year))) +  geom_boxplot()
data %>%  ggplot(aes(x = Month, y = Precip_Mean_Diff, fill = factor(Month))) +  geom_boxplot()
data_long %>%
filter(Parameter %in% c("Precip", "Precip_Mean")) %>%
ggplot(aes(x = Date, y = Value, color = Parameter)) +
geom_line()
library(glmnet)
library(tidyverse)
library(pcaMethods)
library(caret)
tolerance <- read.table("tolerance.txt", sep = "\t", header = T)
# TROST
transcript_data <- read.table("log_norm_ct_trost_field_woNA_modelset.txt", header = T, sep = "\t")
# ALL
transcript_data_all <- read.table("log_norm_ct_trost_valdis.txt", header = T, sep = "\t")
transcript_samples_all <-
read.table("transcript_samplelist_trost_valdis.txt", header=TRUE, sep="\t") %>%
left_join(tolerance[,-3], by = "subspecies_id")
tolerance <- read.table("tolerance.txt", sep = "\t", header = T)
setwd("~/Seafile/uschi-work/repos/trost_select")
tolerance <- read.table("tolerance.txt", sep = "\t", header = T)
# TROST
transcript_data <- read.table("log_norm_ct_trost_field_woNA_modelset.txt", header = T, sep = "\t")
# ALL
transcript_data_all <- read.table("log_norm_ct_trost_valdis.txt", header = T, sep = "\t")
transcript_samples_all <-
read.table("transcript_samplelist_trost_valdis.txt", header=TRUE, sep="\t") %>%
left_join(tolerance[,-3], by = "subspecies_id")
transcript_samples_all$row_id <- rownames(transcript_data_all)
x <- read.table("x.txt", header = T, sep = "\t")
y <- read.table("y.txt", header = T, sep = "\t")$x
pca_transcripts_all <- func_prep_pca(transcript_data_all,
scale_method = "none",
center_option = FALSE,
pc_number = 5,
pca_method = "rnipals")
# complete observations
compObs_transcripts_all <-
pca_transcripts_all@completeObs %>%
as.data.frame
source("func_prep_pca.R")
pca_transcripts_all <- func_prep_pca(transcript_data_all,
scale_method = "none",
center_option = FALSE,
pc_number = 5,
pca_method = "rnipals")
# complete observations
compObs_transcripts_all <-
pca_transcripts_all@completeObs %>%
as.data.frame
transcript_samples_training <-
transcript_samples_all %>%
filter(cultivation == "field") %>%
filter(trost_valdis == "trost") %>%
filter(!is.na(model_set))
compObs_transcripts_training <-
compObs_transcripts_all %>%
rownames_to_column("row_id") %>%
filter(row_id %in% transcript_samples_training$row_id) %>%
column_to_rownames("row_id")
dim(compObs_transcripts_training) # 202 samples
all.equal(compObs_transcripts_training, transcript_data)
transcript_samples_pred <-
transcript_samples_all %>%
filter(trost_valdis == "valdis")
compObs_transcripts_pred <-
compObs_transcripts_all %>%
rownames_to_column("row_id") %>%
filter(row_id %in% transcript_samples_pred$row_id) %>%
column_to_rownames("row_id")
dim(compObs_transcripts_pred) # 803 samples
set.seed(1)
lasso_fit_transcripts <- glmnet(x = as.matrix(compObs_transcripts_training),
y = transcript_samples_training$mdrym_fve)
plot(lasso_fit_transcripts)
# Cross-validation (10-fold)
set.seed(1)
lasso_cv_transcripts <- glmnet::cv.glmnet(x = as.matrix(x), y = y)
# lasso_cv_transcripts <- glmnet::cv.glmnet(x = as.matrix(compObs_transcripts_training),
#                                   y = transcript_samples_training$mdrym_fve)
plot(lasso_cv_transcripts, ylim=c(0, 0.005))
lasso_cv_transcripts$lambda.1se # 0.001457
# Cross-validation (10-fold)
set.seed(1111)
lasso_cv_transcripts <- glmnet::cv.glmnet(x = as.matrix(x), y = y)
lasso_cv_transcripts$lambda.1se # 0.001457
# Cross-validation (10-fold)
set.seed(1111)
lasso_cv_transcripts <- glmnet::cv.glmnet(x = as.matrix(compObs_transcripts_training),
y = transcript_samples_training$mdrym_fve)
lasso_cv_transcripts$lambda.1se # 0.001209806
lasso_cv_transcripts_coef_1se <- predict(lasso_cv_transcripts,
type = "coefficients",
s = lasso_cv_transcripts$lambda.1se)
table(as.matrix(lasso_cv_transcripts_coef_1se) == 0)
lasso_cv_transcripts_coef_1se
rm(x)
rm(y)
rm(transcript_data)
# use largest value of lambda such that CV-error is within 1 standard error of the minimum (ca. 50 metabolites)
lasso_transcripts_predicted_drym_valdis_1se <- predict(lasso_cv_transcripts,
new = as.matrix(compObs_transcripts_pred),
s = "lambda.1se")
summary(lasso_transcripts_predicted_drym_valdis_1se)
# join predicted DRYM values with line IDs and calculate median
lasso_transcripts_predicted_drym_valdis_1se_median <-
data.frame(drym = lasso_transcripts_predicted_drym_valdis_1se[,1],
line = transcript_samples_pred$subspecies_id) %>%
group_by(line) %>%
summarise(median_drym = median(drym)) %>%
rename(drym = median_drym)
View(lasso_transcripts_predicted_drym_valdis_1se_median)
# VALDIS
transcript_samples_valdis <- read.table("transcript_samplelist_valdis.txt", header = T, sep = "\t")
# VALDIS
transcript_samples_valdis <- read.table("transcript_samplelist_valdis.txt", header = T, sep = "\t")
View(transcript_samples_valdis)
# VALDIS
transcript_samples_valdis <- read.table("transcript_samplelist_valdis.txt", header = T, sep = "\t")
# join predicted DRYM values with line IDs and calculate median
lasso_transcripts_predicted_drym_valdis_1se_median <-
data.frame(drym = lasso_transcripts_predicted_drym_valdis_1se[,1],
line_id = transcript_samples_pred$subspecies_id) %>%
group_by(line_id) %>%
summarise(median_drym = median(drym)) %>%
rename(drym = median_drym) %>%
left_join(transcript_samples_valdis[,6:8], by = "line_id")
View(lasso_transcripts_predicted_drym_valdis_1se_median)
# join predicted DRYM values with line IDs and calculate median
lasso_transcripts_predicted_drym_valdis_1se_median <-
data.frame(drym = lasso_transcripts_predicted_drym_valdis_1se[,1],
line_id = transcript_samples_pred$subspecies_id) %>%
group_by(line_id) %>%
summarize(median_drym = median(drym)) %>%
rename(drym = median_drym) %>%
left_join(transcript_samples_valdis[,6:8], by = "line_id")
# VALDIS
transcript_samples_valdis <-
read.table("transcript_samplelist_valdis.txt", header = T, sep = "\t") %>%
dplyr::select(line_id, crossing, name) %>% distinct
# join predicted DRYM values with line IDs and calculate median
lasso_transcripts_predicted_drym_valdis_1se_median <-
data.frame(drym = lasso_transcripts_predicted_drym_valdis_1se[,1],
line_id = transcript_samples_pred$subspecies_id) %>%
group_by(line_id) %>%
summarize(median_drym = median(drym)) %>%
rename(drym = median_drym) %>%
left_join(transcript_samples_valdis, by = "line_id")
# save median of predicted drym
write.table(lasso_transcripts_predicted_drym_valdis_1se_median,
"lasso_transcripts_predicted_drym_valdis_1se_median.txt",
sep="\t", row.names=F)
save.image("lasso_model.RData")
